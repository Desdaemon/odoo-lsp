# git-cliff ~ configuration file
# https://git-cliff.org/docs/configuration

[changelog]
# changelog header
header = """
# Changelog
"""
# template for the changelog body
# https://keats.github.io/tera/docs/#introduction
body = """
{% if version %}\
    ## [{{ version | trim_start_matches(pat="v") }}](https://github.com/Desdaemon/odoo-lsp/releases/tag/{{ version }}) - {{ timestamp | date(format="%Y-%m-%d") }}
{% if previous.version %}\
		Compare: [`{{ previous.version }}...{{ version }}`](https://github.com/Desdaemon/odoo-lsp/compare/{{ previous.version }}...{{ version }})
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | upper_first }}
    {% for commit in commits %}
        - {% if commit.scope -%}
						**{{ commit.scope }}:** {% endif -%}
					{{ commit.message | upper_first }} [`{{ commit.id | truncate(length=7, end="") }}`](https://github.com/Desdaemon/odoo-lsp/commit/{{ commit.id }})\
          {% for footer in commit.footers -%}
            , {{ footer.token }}{{ footer.separator }}{{ footer.value }}\
          {% endfor %}\
    {% endfor %}
{% endfor %}\n
{% endif %}\
"""
# template for the changelog footer
footer = """
<!-- generated by git-cliff -->
"""
# remove the leading and trailing whitespace from the templates
trim = true

[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = true
# process each line of a commit as an individual commit
split_commits = false
# regex for parsing and grouping commits
commit_parsers = [
	{ message = "^feat", group = "Added" },
	{ message = "^fix", group = "Fixed" },
	{ message = "^doc", group = "Documentation" },
	{ message = "^perf", group = "Performance" },
	{ message = "^ref", group = "Refactor" },
	{ message = "^style", group = "Styling" },
	{ message = "^test", group = "Testing" },
	{ message = "^chore\\(deps.*\\)", skip = true },
	{ message = "^chore\\(pr\\)", skip = true },
	{ message = "^chore\\(pull\\)", skip = true },
	{ message = "^chore\\(release\\): prepare for", skip = true },
	# { message = "^chore|^ci", group = "Internal" },
	{ body = ".*security", group = "Security" },
	{ message = ".*", skip = true },
]
# protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = false
# filter out the commits that are not matched by commit parsers
filter_commits = false
# regex for matching git tags
tag_pattern = "v[0-9].*"
# regex for skipping tags
skip_tags = "v0.1.0-beta.1"
# regex for ignoring tags
ignore_tags = ""
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "oldest"
